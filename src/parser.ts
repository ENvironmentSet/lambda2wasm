/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* start := bindings=binding* $
* _ := '\s*'
* identifier := identifier='[A-Za-z]\w*'
* identifier_variable := identifier='[a-z]\w*'
* type_var_mono := identifier='[A-Z]\w*'
* type_var_poly := identifier='[a-z]\w*'
* type_var := type_var_mono | type_var_poly
* type_function_type_head := type_var | '\(' _ type=type _ '\)'
* function_type := param=type_function_type_head _ '->' _ exp=function_type | type_function_type_head
* type := function_type | '\(' _ type=type _ '\)' | type_var
* binding := _ name=identifier_variable _ '=' _ exp=expression _ '\.' _
* expression := '\(' _ exp=expression _ '\)' | additive
* additive := left=additive _ '\+' _ right=multiplicative | left=additive _ '-' _ right=multiplicative | multiplicative
* multiplicative := left=multiplicative _ '\*' _ right=lambda_expression | left=multiplicative _ '/' _ right=lambda_expression | lambda_expression
* lambda_expression := abstraction | application | identifier | num
* abstraction := param=identifier_variable _ ':' _ paramT=type _ '\.' _ body=expression
* application := head=application '\s+' arg=expression_argument | expression_head
* expression_argument := '\(' _ exp=expression _ '\)' | identifier | num
* expression_head := '\(' _ exp=expression _ '\)' | identifier
* num := lexeme='((-?[1-9][0-9]*)|(0))(\.[0-9]+)?' _ '#' _ type=type_var
*   .value = number { return parseFloat(this.lexeme); }
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    _ = "_",
    identifier = "identifier",
    identifier_variable = "identifier_variable",
    type_var_mono = "type_var_mono",
    type_var_poly = "type_var_poly",
    type_var_1 = "type_var_1",
    type_var_2 = "type_var_2",
    type_function_type_head_1 = "type_function_type_head_1",
    type_function_type_head_2 = "type_function_type_head_2",
    function_type_1 = "function_type_1",
    function_type_2 = "function_type_2",
    type_1 = "type_1",
    type_2 = "type_2",
    type_3 = "type_3",
    binding = "binding",
    expression_1 = "expression_1",
    expression_2 = "expression_2",
    additive_1 = "additive_1",
    additive_2 = "additive_2",
    additive_3 = "additive_3",
    multiplicative_1 = "multiplicative_1",
    multiplicative_2 = "multiplicative_2",
    multiplicative_3 = "multiplicative_3",
    lambda_expression_1 = "lambda_expression_1",
    lambda_expression_2 = "lambda_expression_2",
    lambda_expression_3 = "lambda_expression_3",
    lambda_expression_4 = "lambda_expression_4",
    abstraction = "abstraction",
    application_1 = "application_1",
    application_2 = "application_2",
    expression_argument_1 = "expression_argument_1",
    expression_argument_2 = "expression_argument_2",
    expression_argument_3 = "expression_argument_3",
    expression_head_1 = "expression_head_1",
    expression_head_2 = "expression_head_2",
    num = "num",
    $EOF = "$EOF",
}
export interface start {
    kind: ASTKinds.start;
    bindings: binding[];
}
export type _ = string;
export interface identifier {
    kind: ASTKinds.identifier;
    identifier: string;
}
export interface identifier_variable {
    kind: ASTKinds.identifier_variable;
    identifier: string;
}
export interface type_var_mono {
    kind: ASTKinds.type_var_mono;
    identifier: string;
}
export interface type_var_poly {
    kind: ASTKinds.type_var_poly;
    identifier: string;
}
export type type_var = type_var_1 | type_var_2;
export type type_var_1 = type_var_mono;
export type type_var_2 = type_var_poly;
export type type_function_type_head = type_function_type_head_1 | type_function_type_head_2;
export type type_function_type_head_1 = type_var;
export interface type_function_type_head_2 {
    kind: ASTKinds.type_function_type_head_2;
    type: type;
}
export type function_type = function_type_1 | function_type_2;
export interface function_type_1 {
    kind: ASTKinds.function_type_1;
    param: type_function_type_head;
    exp: function_type;
}
export type function_type_2 = type_function_type_head;
export type type = type_1 | type_2 | type_3;
export type type_1 = function_type;
export interface type_2 {
    kind: ASTKinds.type_2;
    type: type;
}
export type type_3 = type_var;
export interface binding {
    kind: ASTKinds.binding;
    name: identifier_variable;
    exp: expression;
}
export type expression = expression_1 | expression_2;
export interface expression_1 {
    kind: ASTKinds.expression_1;
    exp: expression;
}
export type expression_2 = additive;
export type additive = additive_1 | additive_2 | additive_3;
export interface additive_1 {
    kind: ASTKinds.additive_1;
    left: additive;
    right: multiplicative;
}
export interface additive_2 {
    kind: ASTKinds.additive_2;
    left: additive;
    right: multiplicative;
}
export type additive_3 = multiplicative;
export type multiplicative = multiplicative_1 | multiplicative_2 | multiplicative_3;
export interface multiplicative_1 {
    kind: ASTKinds.multiplicative_1;
    left: multiplicative;
    right: lambda_expression;
}
export interface multiplicative_2 {
    kind: ASTKinds.multiplicative_2;
    left: multiplicative;
    right: lambda_expression;
}
export type multiplicative_3 = lambda_expression;
export type lambda_expression = lambda_expression_1 | lambda_expression_2 | lambda_expression_3 | lambda_expression_4;
export type lambda_expression_1 = abstraction;
export type lambda_expression_2 = application;
export type lambda_expression_3 = identifier;
export type lambda_expression_4 = num;
export interface abstraction {
    kind: ASTKinds.abstraction;
    param: identifier_variable;
    paramT: type;
    body: expression;
}
export type application = application_1 | application_2;
export interface application_1 {
    kind: ASTKinds.application_1;
    head: application;
    arg: expression_argument;
}
export type application_2 = expression_head;
export type expression_argument = expression_argument_1 | expression_argument_2 | expression_argument_3;
export interface expression_argument_1 {
    kind: ASTKinds.expression_argument_1;
    exp: expression;
}
export type expression_argument_2 = identifier;
export type expression_argument_3 = num;
export type expression_head = expression_head_1 | expression_head_2;
export interface expression_head_1 {
    kind: ASTKinds.expression_head_1;
    exp: expression;
}
export type expression_head_2 = identifier;
export class num {
    public kind: ASTKinds.num = ASTKinds.num;
    public lexeme: string;
    public type: type_var;
    public value: number;
    constructor(lexeme: string, type: type_var){
        this.lexeme = lexeme;
        this.type = type;
        this.value = ((): number => {
        return parseFloat(this.lexeme);
        })();
    }
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$additive$memo.clear();
        this.$scope$multiplicative$memo.clear();
        this.$scope$application$memo.clear();
    }
    protected $scope$additive$memo: Map<number, [Nullable<additive>, PosInfo]> = new Map();
    protected $scope$multiplicative$memo: Map<number, [Nullable<multiplicative>, PosInfo]> = new Map();
    protected $scope$application$memo: Map<number, [Nullable<application>, PosInfo]> = new Map();
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.run<start>($$dpth,
            () => {
                let $scope$bindings: Nullable<binding[]>;
                let $$res: Nullable<start> = null;
                if (true
                    && ($scope$bindings = this.loop<binding>(() => this.matchbinding($$dpth + 1, $$cr), true)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.start, bindings: $scope$bindings};
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr);
    }
    public matchidentifier($$dpth: number, $$cr?: ErrorTracker): Nullable<identifier> {
        return this.run<identifier>($$dpth,
            () => {
                let $scope$identifier: Nullable<string>;
                let $$res: Nullable<identifier> = null;
                if (true
                    && ($scope$identifier = this.regexAccept(String.raw`(?:[A-Za-z]\w*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.identifier, identifier: $scope$identifier};
                }
                return $$res;
            });
    }
    public matchidentifier_variable($$dpth: number, $$cr?: ErrorTracker): Nullable<identifier_variable> {
        return this.run<identifier_variable>($$dpth,
            () => {
                let $scope$identifier: Nullable<string>;
                let $$res: Nullable<identifier_variable> = null;
                if (true
                    && ($scope$identifier = this.regexAccept(String.raw`(?:[a-z]\w*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.identifier_variable, identifier: $scope$identifier};
                }
                return $$res;
            });
    }
    public matchtype_var_mono($$dpth: number, $$cr?: ErrorTracker): Nullable<type_var_mono> {
        return this.run<type_var_mono>($$dpth,
            () => {
                let $scope$identifier: Nullable<string>;
                let $$res: Nullable<type_var_mono> = null;
                if (true
                    && ($scope$identifier = this.regexAccept(String.raw`(?:[A-Z]\w*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.type_var_mono, identifier: $scope$identifier};
                }
                return $$res;
            });
    }
    public matchtype_var_poly($$dpth: number, $$cr?: ErrorTracker): Nullable<type_var_poly> {
        return this.run<type_var_poly>($$dpth,
            () => {
                let $scope$identifier: Nullable<string>;
                let $$res: Nullable<type_var_poly> = null;
                if (true
                    && ($scope$identifier = this.regexAccept(String.raw`(?:[a-z]\w*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.type_var_poly, identifier: $scope$identifier};
                }
                return $$res;
            });
    }
    public matchtype_var($$dpth: number, $$cr?: ErrorTracker): Nullable<type_var> {
        return this.choice<type_var>([
            () => this.matchtype_var_1($$dpth + 1, $$cr),
            () => this.matchtype_var_2($$dpth + 1, $$cr),
        ]);
    }
    public matchtype_var_1($$dpth: number, $$cr?: ErrorTracker): Nullable<type_var_1> {
        return this.matchtype_var_mono($$dpth + 1, $$cr);
    }
    public matchtype_var_2($$dpth: number, $$cr?: ErrorTracker): Nullable<type_var_2> {
        return this.matchtype_var_poly($$dpth + 1, $$cr);
    }
    public matchtype_function_type_head($$dpth: number, $$cr?: ErrorTracker): Nullable<type_function_type_head> {
        return this.choice<type_function_type_head>([
            () => this.matchtype_function_type_head_1($$dpth + 1, $$cr),
            () => this.matchtype_function_type_head_2($$dpth + 1, $$cr),
        ]);
    }
    public matchtype_function_type_head_1($$dpth: number, $$cr?: ErrorTracker): Nullable<type_function_type_head_1> {
        return this.matchtype_var($$dpth + 1, $$cr);
    }
    public matchtype_function_type_head_2($$dpth: number, $$cr?: ErrorTracker): Nullable<type_function_type_head_2> {
        return this.run<type_function_type_head_2>($$dpth,
            () => {
                let $scope$type: Nullable<type>;
                let $$res: Nullable<type_function_type_head_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchtype($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.type_function_type_head_2, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchfunction_type($$dpth: number, $$cr?: ErrorTracker): Nullable<function_type> {
        return this.choice<function_type>([
            () => this.matchfunction_type_1($$dpth + 1, $$cr),
            () => this.matchfunction_type_2($$dpth + 1, $$cr),
        ]);
    }
    public matchfunction_type_1($$dpth: number, $$cr?: ErrorTracker): Nullable<function_type_1> {
        return this.run<function_type_1>($$dpth,
            () => {
                let $scope$param: Nullable<type_function_type_head>;
                let $scope$exp: Nullable<function_type>;
                let $$res: Nullable<function_type_1> = null;
                if (true
                    && ($scope$param = this.matchtype_function_type_head($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:->)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$exp = this.matchfunction_type($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.function_type_1, param: $scope$param, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchfunction_type_2($$dpth: number, $$cr?: ErrorTracker): Nullable<function_type_2> {
        return this.matchtype_function_type_head($$dpth + 1, $$cr);
    }
    public matchtype($$dpth: number, $$cr?: ErrorTracker): Nullable<type> {
        return this.choice<type>([
            () => this.matchtype_1($$dpth + 1, $$cr),
            () => this.matchtype_2($$dpth + 1, $$cr),
            () => this.matchtype_3($$dpth + 1, $$cr),
        ]);
    }
    public matchtype_1($$dpth: number, $$cr?: ErrorTracker): Nullable<type_1> {
        return this.matchfunction_type($$dpth + 1, $$cr);
    }
    public matchtype_2($$dpth: number, $$cr?: ErrorTracker): Nullable<type_2> {
        return this.run<type_2>($$dpth,
            () => {
                let $scope$type: Nullable<type>;
                let $$res: Nullable<type_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchtype($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.type_2, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchtype_3($$dpth: number, $$cr?: ErrorTracker): Nullable<type_3> {
        return this.matchtype_var($$dpth + 1, $$cr);
    }
    public matchbinding($$dpth: number, $$cr?: ErrorTracker): Nullable<binding> {
        return this.run<binding>($$dpth,
            () => {
                let $scope$name: Nullable<identifier_variable>;
                let $scope$exp: Nullable<expression>;
                let $$res: Nullable<binding> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchidentifier_variable($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$exp = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.binding, name: $scope$name, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchexpression($$dpth: number, $$cr?: ErrorTracker): Nullable<expression> {
        return this.choice<expression>([
            () => this.matchexpression_1($$dpth + 1, $$cr),
            () => this.matchexpression_2($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_1> {
        return this.run<expression_1>($$dpth,
            () => {
                let $scope$exp: Nullable<expression>;
                let $$res: Nullable<expression_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$exp = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_1, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchexpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_2> {
        return this.matchadditive($$dpth + 1, $$cr);
    }
    public matchadditive($$dpth: number, $$cr?: ErrorTracker): Nullable<additive> {
        const fn = () => {
            return this.choice<additive>([
                () => this.matchadditive_1($$dpth + 1, $$cr),
                () => this.matchadditive_2($$dpth + 1, $$cr),
                () => this.matchadditive_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$additive$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$additive$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<additive> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$additive$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchadditive_1($$dpth: number, $$cr?: ErrorTracker): Nullable<additive_1> {
        return this.run<additive_1>($$dpth,
            () => {
                let $scope$left: Nullable<additive>;
                let $scope$right: Nullable<multiplicative>;
                let $$res: Nullable<additive_1> = null;
                if (true
                    && ($scope$left = this.matchadditive($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchmultiplicative($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.additive_1, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchadditive_2($$dpth: number, $$cr?: ErrorTracker): Nullable<additive_2> {
        return this.run<additive_2>($$dpth,
            () => {
                let $scope$left: Nullable<additive>;
                let $scope$right: Nullable<multiplicative>;
                let $$res: Nullable<additive_2> = null;
                if (true
                    && ($scope$left = this.matchadditive($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchmultiplicative($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.additive_2, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchadditive_3($$dpth: number, $$cr?: ErrorTracker): Nullable<additive_3> {
        return this.matchmultiplicative($$dpth + 1, $$cr);
    }
    public matchmultiplicative($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicative> {
        const fn = () => {
            return this.choice<multiplicative>([
                () => this.matchmultiplicative_1($$dpth + 1, $$cr),
                () => this.matchmultiplicative_2($$dpth + 1, $$cr),
                () => this.matchmultiplicative_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$multiplicative$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$multiplicative$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<multiplicative> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$multiplicative$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchmultiplicative_1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicative_1> {
        return this.run<multiplicative_1>($$dpth,
            () => {
                let $scope$left: Nullable<multiplicative>;
                let $scope$right: Nullable<lambda_expression>;
                let $$res: Nullable<multiplicative_1> = null;
                if (true
                    && ($scope$left = this.matchmultiplicative($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchlambda_expression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.multiplicative_1, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchmultiplicative_2($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicative_2> {
        return this.run<multiplicative_2>($$dpth,
            () => {
                let $scope$left: Nullable<multiplicative>;
                let $scope$right: Nullable<lambda_expression>;
                let $$res: Nullable<multiplicative_2> = null;
                if (true
                    && ($scope$left = this.matchmultiplicative($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:/)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchlambda_expression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.multiplicative_2, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchmultiplicative_3($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicative_3> {
        return this.matchlambda_expression($$dpth + 1, $$cr);
    }
    public matchlambda_expression($$dpth: number, $$cr?: ErrorTracker): Nullable<lambda_expression> {
        return this.choice<lambda_expression>([
            () => this.matchlambda_expression_1($$dpth + 1, $$cr),
            () => this.matchlambda_expression_2($$dpth + 1, $$cr),
            () => this.matchlambda_expression_3($$dpth + 1, $$cr),
            () => this.matchlambda_expression_4($$dpth + 1, $$cr),
        ]);
    }
    public matchlambda_expression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<lambda_expression_1> {
        return this.matchabstraction($$dpth + 1, $$cr);
    }
    public matchlambda_expression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<lambda_expression_2> {
        return this.matchapplication($$dpth + 1, $$cr);
    }
    public matchlambda_expression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<lambda_expression_3> {
        return this.matchidentifier($$dpth + 1, $$cr);
    }
    public matchlambda_expression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<lambda_expression_4> {
        return this.matchnum($$dpth + 1, $$cr);
    }
    public matchabstraction($$dpth: number, $$cr?: ErrorTracker): Nullable<abstraction> {
        return this.run<abstraction>($$dpth,
            () => {
                let $scope$param: Nullable<identifier_variable>;
                let $scope$paramT: Nullable<type>;
                let $scope$body: Nullable<expression>;
                let $$res: Nullable<abstraction> = null;
                if (true
                    && ($scope$param = this.matchidentifier_variable($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$paramT = this.matchtype($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.abstraction, param: $scope$param, paramT: $scope$paramT, body: $scope$body};
                }
                return $$res;
            });
    }
    public matchapplication($$dpth: number, $$cr?: ErrorTracker): Nullable<application> {
        const fn = () => {
            return this.choice<application>([
                () => this.matchapplication_1($$dpth + 1, $$cr),
                () => this.matchapplication_2($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$application$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$application$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<application> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$application$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchapplication_1($$dpth: number, $$cr?: ErrorTracker): Nullable<application_1> {
        return this.run<application_1>($$dpth,
            () => {
                let $scope$head: Nullable<application>;
                let $scope$arg: Nullable<expression_argument>;
                let $$res: Nullable<application_1> = null;
                if (true
                    && ($scope$head = this.matchapplication($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$arg = this.matchexpression_argument($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.application_1, head: $scope$head, arg: $scope$arg};
                }
                return $$res;
            });
    }
    public matchapplication_2($$dpth: number, $$cr?: ErrorTracker): Nullable<application_2> {
        return this.matchexpression_head($$dpth + 1, $$cr);
    }
    public matchexpression_argument($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_argument> {
        return this.choice<expression_argument>([
            () => this.matchexpression_argument_1($$dpth + 1, $$cr),
            () => this.matchexpression_argument_2($$dpth + 1, $$cr),
            () => this.matchexpression_argument_3($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_argument_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_argument_1> {
        return this.run<expression_argument_1>($$dpth,
            () => {
                let $scope$exp: Nullable<expression>;
                let $$res: Nullable<expression_argument_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$exp = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_argument_1, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchexpression_argument_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_argument_2> {
        return this.matchidentifier($$dpth + 1, $$cr);
    }
    public matchexpression_argument_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_argument_3> {
        return this.matchnum($$dpth + 1, $$cr);
    }
    public matchexpression_head($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_head> {
        return this.choice<expression_head>([
            () => this.matchexpression_head_1($$dpth + 1, $$cr),
            () => this.matchexpression_head_2($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_head_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_head_1> {
        return this.run<expression_head_1>($$dpth,
            () => {
                let $scope$exp: Nullable<expression>;
                let $$res: Nullable<expression_head_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$exp = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_head_1, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchexpression_head_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_head_2> {
        return this.matchidentifier($$dpth + 1, $$cr);
    }
    public matchnum($$dpth: number, $$cr?: ErrorTracker): Nullable<num> {
        return this.run<num>($$dpth,
            () => {
                let $scope$lexeme: Nullable<string>;
                let $scope$type: Nullable<type_var>;
                let $$res: Nullable<num> = null;
                if (true
                    && ($scope$lexeme = this.regexAccept(String.raw`(?:((-?[1-9][0-9]*)|(0))(\.[0-9]+)?)`, $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchtype_var($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new num($scope$lexeme, $scope$type);
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}