start := bindings=binding* $

identifier := identifier='[A-Za-z]\w*'
identifier_variable := identifier='[a-z]\w*'

type_function_type_head := identifier | '\(' type '\)'
function_type := type_function_type_head  | param=type_function_type_head '->' exp=function_type
type := identifier | function_type | '\(' type '\)'

binding := name=identifier_variable '=' exp=expression
expression := '\(' expression '\)' | additive
additive := left=additive '\+' right=multiplicative | left=additive '-' right=multiplicative | multiplicative
multiplicative := left=multiplicative '\*' right=lambda_expression | left=multiplicative '/' right=lambda_expression | lambda_expression
lambda_expression := abstraction | application | identifier | num
abstraction := param=identifier_variable ':' paramT=type '\.' body=expression
application := head=application arg=expression_argument | expression_head
expression_argument := '\(' expression '\)' | identifier
expression_head := '\(' expression '\)' | identifier
num := lexeme='[1-9][0-9]*(\.[0-9]+)?'
  .value = number { return parseFloat(this.lexeme); }